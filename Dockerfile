# Use Python 3.11 slim image as base with x86_64 architecture for Open3D compatibility
FROM --platform=linux/amd64 python:3.11-slim

# Set working directory
WORKDIR /app

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV STREAMLIT_SERVER_PORT=8501
ENV STREAMLIT_SERVER_ADDRESS=0.0.0.0
# Disable Streamlit welcome screen and telemetry
ENV STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
ENV STREAMLIT_SERVER_HEADLESS=true
ENV STREAMLIT_THEME_BASE=dark
# OpenGL headless rendering support for Open3D
ENV DISPLAY=:99
ENV LIBGL_ALWAYS_SOFTWARE=1
ENV MESA_GL_VERSION_OVERRIDE=3.3
ENV MESA_GLSL_VERSION_OVERRIDE=330

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgcc-s1 \
    libxi6 \
    libxrandr2 \
    libxss1 \
    libxcomposite1 \
    libxcursor1 \
    libxdamage1 \
    libxfixes3 \
    libxinerama1 \
    libxtst6 \
    libasound2 \
    libatk1.0-0 \
    libcairo-gobject2 \
    libgtk-3-0 \
    libgdk-pixbuf-2.0-0 \
    && rm -rf /var/lib/apt/lists/*

# Install virtual display for headless OpenGL rendering
RUN apt-get update && apt-get install -y \
    xvfb \
    mesa-utils \
    && rm -rf /var/lib/apt/lists/*

# Install UV package manager for faster dependency installation
RUN pip install uv

# Copy dependency files
COPY pyproject.toml ./

# Install Python dependencies using UV
RUN uv sync

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p output dicom

# Create sample README files
RUN echo "# Output Directory\n\nThis directory contains processed medical imaging files and 3D models generated by the Vista-3D system.\n\n## File Types\n\n- **DICOM**: \`.dcm\` - Original medical imaging files\n- **NIfTI**: \`.nii\`, \`.nii.gz\` - Standard neuroimaging format\n- **PLY**: \`.ply\` - 3D mesh files for visualization\n- **STL**: \`.stl\` - 3D printable mesh files\n- **JSON**: \`.json\` - Metadata and configuration files\n\n## Usage\n\nFiles in this directory are automatically served by the image server and can be accessed via the web interface at \`http://localhost:8888/output/\`." > output/README.md

RUN echo "# DICOM Directory\n\nThis directory contains DICOM (Digital Imaging and Communications in Medicine) files for medical imaging processing.\n\n## About DICOM\n\nDICOM is the standard for handling, storing, printing, and transmitting information in medical imaging. It includes a file format definition and a network communications protocol.\n\n## Supported Modalities\n\n- **CT** (Computed Tomography)\n- **MRI** (Magnetic Resonance Imaging)\n- **PET** (Positron Emission Tomography)\n- **Ultrasound**\n- **X-Ray**\n- **Nuclear Medicine**\n\n## File Structure\n\nDICOM files typically have:\n- No file extension (though sometimes \`.dcm\`)\n- Unique identifiers in the filename\n- Metadata embedded in the file header\n\n## Usage\n\n1. Place DICOM files in this directory\n2. Use the Vista-3D interface to process them\n3. Converted files will appear in the \`output/\` directory\n\n## Access\n\nFiles in this directory can be accessed via the image server at \`http://localhost:8888/dicom/\`." > dicom/README.md

# Expose Streamlit port
EXPOSE 8501

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8501/_stcore/health || exit 1

# Create startup script for virtual display and application
RUN echo '#!/bin/bash\n\
# Start virtual display for OpenGL\n\
Xvfb :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset &\n\
# Wait for display to be ready\n\
sleep 2\n\
# Test OpenGL setup (optional - can be disabled for production)\n\
if [ "${TEST_OPENGL:-false}" = "true" ]; then\n\
    echo "Testing OpenGL setup..."\n\
    python test_opengl.py\n\
fi\n\
# Run the application\n\
exec uv run streamlit run app.py --server.port=8501 --server.address=0.0.0.0' > /app/start.sh && \
    chmod +x /app/start.sh

# Run the application with virtual display
CMD ["/app/start.sh"]
