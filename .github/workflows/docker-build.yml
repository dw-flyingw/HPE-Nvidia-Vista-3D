name: Build and Push Docker Images

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.2.0)'
        required: true
        default: '1.2.0'
      push_images:
        description: 'Push images to registry'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  REGISTRY: docker.io
  FRONTEND_IMAGE: dwtwp/vista3d-frontend
  IMAGE_SERVER_IMAGE: dwtwp/vista3d-image-server

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version from tag
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [[ "${{ github.event.inputs.version }}" != "" ]]; then
            VERSION=${{ github.event.inputs.version }}
          else
            VERSION="dev-${GITHUB_SHA::8}"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"

      - name: Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.FRONTEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=${{ steps.version.outputs.VERSION }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for Image Server
        id: meta-image-server
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_SERVER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=${{ steps.version.outputs.VERSION }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_images != 'false') }}
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}

      - name: Build and push Image Server
        uses: docker/build-push-action@v5
        with:
          context: ./image_server
          file: ./image_server/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_images != 'false') }}
          tags: ${{ steps.meta-image-server.outputs.tags }}
          labels: ${{ steps.meta-image-server.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}

      - name: Test Frontend image
        run: |
          docker run --rm ${{ env.FRONTEND_IMAGE }}:${{ steps.version.outputs.VERSION }} \
            python -c "import streamlit; print('Streamlit version:', streamlit.__version__)"

      - name: Test Image Server image
        run: |
          docker run --rm ${{ env.IMAGE_SERVER_IMAGE }}:${{ steps.version.outputs.VERSION }} \
            python -c "import fastapi; print('FastAPI version:', fastapi.__version__)"

      - name: Generate artifact summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ steps.version.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images Built:" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.FRONTEND_IMAGE }}:${{ steps.version.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.IMAGE_SERVER_IMAGE }}:${{ steps.version.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            echo "✅ **Images pushed to Docker Hub**" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Images built but not pushed (PR build)**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Output image digests
        run: |
          echo "Frontend digest: ${{ steps.meta-frontend.outputs.digest }}"
          echo "Image Server digest: ${{ steps.meta-image-server.outputs.digest }}"

