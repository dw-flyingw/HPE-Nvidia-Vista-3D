#!/usr/bin/env python3
"""
HPE NVIDIA Vista3D Backend Setup

This script sets up the Vista3D backend server on Ubuntu with NVIDIA GPU.
After setup, run: docker compose up

Requirements:
- Ubuntu Linux with NVIDIA GPU
- Docker with NVIDIA Container Toolkit
- NVIDIA NGC API key (get free at https://ngc.nvidia.com/)
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

class Colors:
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    BOLD = '\033[1m'
    END = '\033[0m'

def print_header(text: str) -> None:
    print(f"\n{Colors.BOLD}{Colors.CYAN}{'='*70}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{text.center(70)}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{'='*70}{Colors.END}\n")

def print_success(text: str) -> None:
    print(f"{Colors.GREEN}‚úÖ {text}{Colors.END}")

def print_info(text: str) -> None:
    print(f"{Colors.BLUE}‚ÑπÔ∏è  {text}{Colors.END}")

def print_step(step: int, total: int, text: str) -> None:
    print(f"\n{Colors.BOLD}[{step}/{total}] {text}{Colors.END}")

def check_system():
    """Check system requirements"""
    print_step(1, 5, "Checking System Requirements")
    
    all_good = True
    
    # Check OS
    if platform.system() != 'Linux':
        print(f"{Colors.YELLOW}‚ùå This script is for Linux servers (detected: {platform.system()}){Colors.END}")
        all_good = False
    else:
        print_success(f"OS: {platform.system()}")
    
    # Check Docker
    try:
        result = subprocess.run("docker --version", shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print_success(f"Docker: {result.stdout.strip()}")
        else:
            print(f"{Colors.YELLOW}‚ùå Docker not found{Colors.END}")
            all_good = False
    except:
        print(f"{Colors.YELLOW}‚ùå Docker not found{Colors.END}")
        all_good = False
    
    # Check NVIDIA GPU
    try:
        result = subprocess.run("nvidia-smi", shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print_success("NVIDIA GPU: Detected")
        else:
            print(f"{Colors.YELLOW}‚ùå NVIDIA GPU not found{Colors.END}")
            all_good = False
    except:
        print(f"{Colors.YELLOW}‚ùå NVIDIA GPU not found{Colors.END}")
        all_good = False
    
    # Check NVIDIA Container Toolkit
    try:
        result = subprocess.run(
            "docker run --rm --gpus all nvidia/cuda:11.8.0-base-ubuntu22.04 nvidia-smi",
            shell=True, capture_output=True, text=True, timeout=30
        )
        if result.returncode == 0:
            print_success("NVIDIA Container Toolkit: Working")
        else:
            print(f"{Colors.YELLOW}‚ùå NVIDIA Container Toolkit not working{Colors.END}")
            all_good = False
    except:
        print(f"{Colors.YELLOW}‚ùå NVIDIA Container Toolkit not working{Colors.END}")
        all_good = False
    
    return all_good

def get_ngc_api_key():
    """Get NGC API key from user"""
    print_step(2, 5, "NVIDIA NGC Configuration")
    
    print_info("NVIDIA NGC API Key is required for Vista3D")
    print_info("Get your free API key at: https://ngc.nvidia.com/")
    print()
    
    while True:
        api_key = input("Enter your NVIDIA NGC API key (starts with 'nvapi-'): ").strip()
        if api_key.startswith('nvapi-'):
            return api_key
        else:
            print(f"{Colors.YELLOW}‚ùå API key must start with 'nvapi-'{Colors.END}")

def create_directories():
    """Create necessary directories"""
    print_step(3, 5, "Creating Data Directories")
    
    script_dir = Path(__file__).parent
    output_folder = script_dir.parent / "output"
    
    output_folder.mkdir(exist_ok=True)
    print_success(f"Created: {output_folder}")
    
    return str(output_folder)

def create_env_file(ngc_api_key: str, output_folder: str):
    """Create .env file with configuration"""
    print_step(4, 5, "Creating Environment Configuration")
    
    env_content = f"""# HPE NVIDIA Vista3D Backend Configuration
# Generated by setup.py

# NVIDIA NGC Configuration
NGC_API_KEY={ngc_api_key}
NGC_ORG_ID=

# Data Directories
OUTPUT_FOLDER={output_folder}

# Server Configuration
VISTA3D_SERVER=http://localhost:8000
IMAGE_SERVER=http://localhost:8888

# Docker Configuration
COMPOSE_PROJECT_NAME=vista3d-backend
"""
    
    env_file = Path(__file__).parent / '.env'
    env_file.write_text(env_content)
    print_success(f"Created: {env_file}")

def pull_vista3d_image():
    """Pull Vista3D Docker image from NGC"""
    print_step(5, 5, "Pulling Vista3D Docker Image")
    
    image = "nvcr.io/nim/nvidia/vista3d:1.0.0"
    print_info(f"Pulling {image}...")
    print_info("This is a large image (~30GB) and may take considerable time")
    print_info("Progress will be shown below:")
    print()
    
    try:
        # Show real-time progress
        subprocess.run(f"docker pull {image}", shell=True)
        print()
        print_success("Vista3D image pulled successfully")
        return True
    except:
        print()
        print(f"{Colors.YELLOW}‚ö†Ô∏è  Failed to pull image (you can pull it later with: docker compose pull){Colors.END}")
        return False

def main():
    print_header("HPE NVIDIA Vista3D Backend Setup")
    print_info("Setting up Vista3D backend server on Ubuntu")
    print()
    
    # Check we're in the right directory
    if not Path('docker-compose.yml').exists():
        print(f"{Colors.YELLOW}‚ùå docker-compose.yml not found{Colors.END}")
        print_info("Please run this script from the backend directory")
        sys.exit(1)
    
    # Check system requirements
    if not check_system():
        print()
        print(f"{Colors.YELLOW}‚ö†Ô∏è  Some system requirements are not met{Colors.END}")
        response = input("Continue anyway? (y/N): ").strip().lower()
        if response not in ['y', 'yes']:
            print_info("Setup cancelled")
            sys.exit(0)
    
    # Get NGC API key
    ngc_api_key = get_ngc_api_key()
    
    # Create directories
    output_folder = create_directories()
    
    # Create .env file
    create_env_file(ngc_api_key, output_folder)
    
    # Pull Vista3D image
    print()
    response = input("Pull Vista3D Docker image now? (Y/n): ").strip().lower()
    if response != 'n':
        pull_vista3d_image()
    else:
        print_info("Skipping image pull (run 'docker compose pull' later)")
    
    # Final instructions
    print_header("‚úÖ Setup Complete!")
    print()
    print_info("Configuration:")
    print_info(f"  ‚Ä¢ Output folder: {output_folder}")
    print_info("  ‚Ä¢ Vista3D API: http://localhost:8000")
    print_info("  ‚Ä¢ Expected image server: http://localhost:8888 (from Mac via SSH tunnel)")
    print()
    print_header("üìã Next Steps")
    print()
    print(f"{Colors.BOLD}1. Start the Backend:{Colors.END}")
    print("   In this directory, run:")
    print(f"   {Colors.CYAN}docker compose up{Colors.END}")
    print()
    print(f"{Colors.BOLD}2. From Your Mac, Create SSH Tunnel:{Colors.END}")
    print("   Open a terminal on your Mac and run:")
    print(f"   {Colors.CYAN}ssh -L 8000:localhost:8000 -R 8888:0.0.0.0:8888 user@this-server{Colors.END}")
    print("   This allows:")
    print("   - Mac to access Vista3D at localhost:8000")
    print("   - Vista3D to access Mac's image server at localhost:8888")
    print()
    print(f"{Colors.BOLD}3. Access the API:{Colors.END}")
    print("   From the server: http://localhost:8000/docs")
    print("   From your Mac (via tunnel): http://localhost:8000/docs")
    print()
    print(f"{Colors.BOLD}To Stop:{Colors.END}")
    print(f"   {Colors.CYAN}docker compose down{Colors.END}")
    print()

if __name__ == "__main__":
    main()

