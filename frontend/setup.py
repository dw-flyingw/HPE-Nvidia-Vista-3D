#!/usr/bin/env python3
"""
HPE NVIDIA Vista3D Frontend & Image Server Setup

This script sets up both the frontend and image server on your local machine (Mac).
After setup, run: docker compose up

Default configuration:
- Image Server: localhost:8888
- Vista3D Backend: localhost:8000 (via SSH tunnel from remote server)

SSH Tunnel Setup:
  From your Mac, connect to the remote Ubuntu backend server:
  ssh -L 8000:localhost:8000 -R 8888:0.0.0.0:8888 user@remote-server
  
  This creates:
  - Forward tunnel: Access remote Vista3D backend at localhost:8000
  - Reverse tunnel: Remote server can access your image server at port 8888
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

class Colors:
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    BOLD = '\033[1m'
    END = '\033[0m'

def print_header(text: str) -> None:
    print(f"\n{Colors.BOLD}{Colors.CYAN}{'='*70}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{text.center(70)}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{'='*70}{Colors.END}\n")

def print_success(text: str) -> None:
    print(f"{Colors.GREEN}‚úÖ {text}{Colors.END}")

def print_info(text: str) -> None:
    print(f"{Colors.BLUE}‚ÑπÔ∏è  {text}{Colors.END}")

def print_step(step: int, total: int, text: str) -> None:
    print(f"\n{Colors.BOLD}[{step}/{total}] {text}{Colors.END}")

def check_docker():
    """Check if Docker is available"""
    print_step(1, 4, "Checking Docker")
    try:
        result = subprocess.run("docker --version", shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print_success(f"Docker: {result.stdout.strip()}")
            return True
        else:
            print(f"{Colors.YELLOW}‚ùå Docker not found{Colors.END}")
            print_info("Install Docker from: https://docs.docker.com/get-docker/")
            return False
    except:
        print(f"{Colors.YELLOW}‚ùå Docker not found{Colors.END}")
        return False

def create_directories():
    """Create necessary directories"""
    print_step(2, 4, "Creating Data Directories")
    
    script_dir = Path(__file__).parent
    dicom_folder = script_dir.parent / "dicom"
    output_folder = script_dir.parent / "output"
    
    for folder in [dicom_folder, output_folder]:
        folder.mkdir(exist_ok=True)
        print_success(f"Created: {folder}")
    
    return str(dicom_folder), str(output_folder)

def create_env_file(dicom_folder: str, output_folder: str):
    """Create .env file with configuration"""
    print_step(3, 4, "Creating Environment Configuration")
    
    env_content = f"""# HPE NVIDIA Vista3D Frontend & Image Server Configuration
# Generated by setup.py

# Data Directories
DICOM_FOLDER={dicom_folder}
OUTPUT_FOLDER={output_folder}

# Server URLs (SSH tunnel setup)
VISTA3D_SERVER=http://localhost:8000
IMAGE_SERVER=http://localhost:8888
VISTA3D_IMAGE_SERVER_URL=http://host.docker.internal:8888

# Ports
FRONTEND_PORT=8501
IMAGE_SERVER_PORT=8888

# Configuration
VESSELS_OF_INTEREST=all
COMPOSE_PROJECT_NAME=vista3d-frontend
"""
    
    env_file = Path(__file__).parent / '.env'
    env_file.write_text(env_content)
    print_success(f"Created: {env_file}")

def pull_docker_images():
    """Pull Docker images from Docker Hub"""
    print_step(4, 4, "Pulling Docker Images")
    
    images = [
        'dwtwp/vista3d-frontend:latest',
        'dwtwp/vista3d-image-server:latest'
    ]
    
    for image in images:
        print_info(f"Pulling {image}...")
        try:
            result = subprocess.run(f"docker pull {image}", shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                print_success(f"‚úì {image}")
            else:
                print(f"{Colors.YELLOW}‚ö†Ô∏è  Could not pull {image} (will build locally if needed){Colors.END}")
        except:
            print(f"{Colors.YELLOW}‚ö†Ô∏è  Could not pull {image} (will build locally if needed){Colors.END}")

def main():
    print_header("HPE NVIDIA Vista3D Frontend & Image Server Setup")
    print_info("Setting up frontend and image server on your Mac")
    print_info("Backend will run on remote Ubuntu server via SSH tunnel")
    print()
    
    # Check we're in the right directory
    if not Path('docker-compose.yml').exists():
        print(f"{Colors.YELLOW}‚ùå docker-compose.yml not found{Colors.END}")
        print_info("Please run this script from the frontend directory")
        sys.exit(1)
    
    # Check Docker
    if not check_docker():
        print_info("Please install Docker and run this script again")
        sys.exit(1)
    
    # Create directories
    dicom_folder, output_folder = create_directories()
    
    # Create .env file
    create_env_file(dicom_folder, output_folder)
    
    # Pull Docker images
    pull_docker_images()
    
    # Final instructions
    print_header("‚úÖ Setup Complete!")
    print()
    print_info("Configuration:")
    print_info(f"  ‚Ä¢ DICOM folder: {dicom_folder}")
    print_info(f"  ‚Ä¢ Output folder: {output_folder}")
    print_info("  ‚Ä¢ Image server: http://localhost:8888")
    print_info("  ‚Ä¢ Vista3D backend: http://localhost:8000 (via SSH tunnel)")
    print()
    print_header("üìã Next Steps")
    print()
    print(f"{Colors.BOLD}1. Connect to Remote Backend via SSH Tunnel:{Colors.END}")
    print("   Open a terminal and run:")
    print(f"   {Colors.CYAN}ssh -L 8000:localhost:8000 -R 8888:0.0.0.0:8888 user@remote-server{Colors.END}")
    print("   Keep this terminal open while using Vista3D")
    print()
    print(f"{Colors.BOLD}2. Start Frontend & Image Server:{Colors.END}")
    print("   In this directory, run:")
    print(f"   {Colors.CYAN}docker compose up{Colors.END}")
    print()
    print(f"{Colors.BOLD}3. Access the Web Interface:{Colors.END}")
    print(f"   Open your browser to: {Colors.CYAN}http://localhost:8501{Colors.END}")
    print()
    print(f"{Colors.BOLD}To Stop:{Colors.END}")
    print(f"   {Colors.CYAN}docker compose down{Colors.END}")
    print()

if __name__ == "__main__":
    main()

