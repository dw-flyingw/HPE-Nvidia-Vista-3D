#!/usr/bin/env python3
"""
HPE NVIDIA Vista3D Frontend & Image Server Setup

This script sets up both the frontend and image server on your local machine (Mac).
After setup, run: docker compose up

Default configuration:
- Image Server: localhost:8888
- Vista3D Backend: localhost:8000 (via SSH tunnel from remote server)

SSH Tunnel Setup:
  From your Mac, connect to the remote Ubuntu backend server:
  ssh -L 8000:localhost:8000 -R 8888:0.0.0.0:8888 user@remote-server
  
  This creates:
  - Forward tunnel: Access remote Vista3D backend at localhost:8000
  - Reverse tunnel: Remote server can access your image server at port 8888
"""

import os
import sys
import subprocess
import platform
import shutil
import tarfile
import argparse
from pathlib import Path

class Colors:
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    BOLD = '\033[1m'
    END = '\033[0m'

def print_header(text: str) -> None:
    print(f"\n{Colors.BOLD}{Colors.CYAN}{'='*70}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{text.center(70)}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{'='*70}{Colors.END}\n")

def print_success(text: str) -> None:
    print(f"{Colors.GREEN}✅ {text}{Colors.END}")

def print_info(text: str) -> None:
    print(f"{Colors.BLUE}ℹ️  {text}{Colors.END}")

def print_step(step: int, total: int, text: str) -> None:
    print(f"\n{Colors.BOLD}[{step}/{total}] {text}{Colors.END}")

def check_docker():
    """Check if Docker is available"""
    print_step(1, 6, "Checking Docker")
    try:
        result = subprocess.run("docker --version", shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print_success(f"Docker: {result.stdout.strip()}")
            return True
        else:
            print(f"{Colors.YELLOW}❌ Docker not found{Colors.END}")
            print_info("Install Docker from: https://docs.docker.com/get-docker/")
            return False
    except:
        print(f"{Colors.YELLOW}❌ Docker not found{Colors.END}")
        return False

def create_directories():
    """Create necessary directories"""
    print_step(2, 6, "Creating Data Directories")
    
    script_dir = Path(__file__).parent
    dicom_folder = script_dir.parent / "dicom"
    output_folder = script_dir.parent / "output"
    
    for folder in [dicom_folder, output_folder]:
        folder.mkdir(exist_ok=True)
        print_success(f"Created: {folder}")
    
    return str(dicom_folder), str(output_folder)

def ask_deployment_type():
    """Ask user about deployment type"""
    print()
    print(f"{Colors.BOLD}Deployment Configuration:{Colors.END}")
    print("1. All on same server (Backend + Frontend + Image Server on Ubuntu)")
    print("2. Split deployment (Frontend/Image Server on Mac, Backend on Ubuntu via SSH)")
    print()
    
    while True:
        choice = input("Select deployment type (1 or 2): ").strip()
        if choice in ['1', '2']:
            return choice
        else:
            print(f"{Colors.YELLOW}Please enter 1 or 2{Colors.END}")

def create_env_file(dicom_folder: str, output_folder: str, deployment_type: str):
    """Create .env file with configuration"""
    print_step(3, 6, "Creating Environment Configuration")
    
    if deployment_type == '1':
        # All on same server
        env_content = f"""# HPE NVIDIA Vista3D Frontend & Image Server Configuration
# Generated by setup.py - All services on same server

# Data Directories
DICOM_FOLDER={dicom_folder}
OUTPUT_FOLDER={output_folder}

# Server URLs (All on same Docker network)
VISTA3D_SERVER=http://vista3d-server-standalone:8000
IMAGE_SERVER=http://localhost:8888
VISTA3D_IMAGE_SERVER_URL=http://image-server:8888

# Ports
FRONTEND_PORT=8501
IMAGE_SERVER_PORT=8888

# Configuration
VESSELS_OF_INTEREST=all
COMPOSE_PROJECT_NAME=vista3d-frontend
"""
    else:
        # Split deployment (Mac frontend, Ubuntu backend via SSH)
        env_content = f"""# HPE NVIDIA Vista3D Frontend & Image Server Configuration
# Generated by setup.py - Split deployment with SSH tunnel

# Data Directories
DICOM_FOLDER={dicom_folder}
OUTPUT_FOLDER={output_folder}

# Server URLs (SSH tunnel setup)
# Frontend: host.docker.internal:8000 -> Mac's localhost:8000 -> SSH tunnel -> Ubuntu backend
# Backend: host.docker.internal:8888 -> Ubuntu host -> SSH reverse tunnel -> Mac image server
VISTA3D_SERVER=http://host.docker.internal:8000
IMAGE_SERVER=http://localhost:8888
VISTA3D_IMAGE_SERVER_URL=http://host.docker.internal:8888

# Ports
FRONTEND_PORT=8501
IMAGE_SERVER_PORT=8888

# Configuration
VESSELS_OF_INTEREST=all
COMPOSE_PROJECT_NAME=vista3d-frontend
"""
    
    env_file = Path(__file__).parent / '.env'
    env_file.write_text(env_content)
    print_success(f"Created: {env_file}")

def check_and_pull_git_lfs_file(archive_path: Path) -> bool:
    """Check if file is a Git LFS pointer and pull the actual file if needed"""
    if not archive_path.exists():
        return False
    
    # Check if it's a Git LFS pointer file
    try:
        # Try to read as text with error handling
        content = archive_path.read_text(errors='ignore')
        # Git LFS pointer files start with "version https://git-lfs.github.com/spec/v1"
        if content.startswith("version https://git-lfs.github.com/spec/v1"):
            print_info("Detected Git LFS pointer file - pulling actual file...")
            
            # Check if git lfs is installed
            result = subprocess.run("git lfs version", shell=True, capture_output=True, text=True)
            if result.returncode != 0:
                print(f"{Colors.YELLOW}❌ Git LFS not found{Colors.END}")
                print_info("Please install Git LFS to download sample data:")
                print_info("  brew install git-lfs  # macOS")
                print_info("  apt-get install git-lfs  # Ubuntu/Debian")
                return False
            
            # Pull the actual file
            print_info("Pulling actual file from Git LFS...")
            result = subprocess.run(
                f"cd {archive_path.parent} && git lfs pull --include '{archive_path.name}'",
                shell=True, capture_output=True, text=True
            )
            
            if result.returncode == 0:
                print_success("Successfully downloaded actual file from Git LFS")
                return True
            else:
                print(f"{Colors.YELLOW}⚠️  Failed to pull from Git LFS{Colors.END}")
                print_info("You can manually run: git lfs pull")
                return False
    except Exception as e:
        # File is binary/not a text file, which is expected for the actual archive
        pass
    
    return True

def install_sample_data(dicom_folder: str, output_folder: str, skip_prompt: bool = False):
    """Install sample data from sample_data.tgz"""
    print_step(5, 6, "Installing Sample Data")
    
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    sample_data_archive = project_root / "sample_data.tgz"
    
    if not sample_data_archive.exists():
        print_info("No sample_data.tgz found - skipping sample data installation")
        print_info("You can manually add DICOM files to the dicom/ folder")
        return
    
    # Check if file is a Git LFS pointer and pull actual file if needed
    if not check_and_pull_git_lfs_file(sample_data_archive):
        print_info("Could not retrieve sample data from Git LFS")
        print_info("Sample data installation skipped")
        return
    
    print_info(f"Found sample data: {sample_data_archive}")
    
    # Check if sample data is already installed
    sample_dicom = Path(dicom_folder) / "SAMPLE_DATA_001"
    sample_output = Path(output_folder) / "SAMPLE_DATA_001"
    
    if sample_dicom.exists() and sample_output.exists():
        print_info("Sample data already installed - skipping")
        return
    
    # Ask user if they want to install
    if not skip_prompt:
        print()
        print_info("Sample data includes de-identified DICOM files and processed outputs")
        print_info("from patient SAMPLE_DATA_001 (~250MB extracted)")
        response = input("Install sample data? (Y/n): ").strip().lower()
        
        if response in ['n', 'no']:
            print_info("Skipping sample data installation")
            return
    
    # Extract to temporary directory
    temp_dir = project_root / ".sample_data_temp"
    temp_dir.mkdir(exist_ok=True)
    
    try:
        print_info("Extracting sample data archive...")
        with tarfile.open(sample_data_archive, 'r:gz') as tar:
            tar.extractall(temp_dir)
        
        # Move dicom files
        src_dicom = temp_dir / "dicom" / "SAMPLE_DATA_001"
        if src_dicom.exists():
            print_info("Installing DICOM files...")
            shutil.move(str(src_dicom), str(Path(dicom_folder) / "SAMPLE_DATA_001"))
            print_success(f"✓ Installed DICOM files to dicom/SAMPLE_DATA_001")
        
        # Move output files
        src_output_dir = temp_dir / "output"
        if src_output_dir.exists():
            print_info("Installing output files...")
            for item in src_output_dir.iterdir():
                if item.name != '.DS_Store':
                    dest = Path(output_folder) / item.name
                    if item.is_dir():
                        shutil.move(str(item), str(dest))
                    else:
                        dest.parent.mkdir(exist_ok=True)
                        shutil.move(str(item), str(dest))
            print_success(f"✓ Installed output files to output/")
        
        print_success("Sample data installed successfully!")
        
    except Exception as e:
        print(f"{Colors.YELLOW}❌ Error installing sample data: {e}{Colors.END}")
        print_info("You can manually extract sample_data.tgz if needed")
    finally:
        # Clean up
        if temp_dir.exists():
            shutil.rmtree(temp_dir, ignore_errors=True)

def pull_docker_images():
    """Pull Docker images from Docker Hub"""
    print_step(6, 6, "Pulling Docker Images")
    
    images = [
        'dwtwp/vista3d-frontend:latest',
        'dwtwp/vista3d-image-server:latest'
    ]
    
    for image in images:
        print_info(f"Pulling {image}...")
        try:
            result = subprocess.run(f"docker pull {image}", shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                print_success(f"✓ {image}")
            else:
                print(f"{Colors.YELLOW}⚠️  Could not pull {image} (will build locally if needed){Colors.END}")
        except:
            print(f"{Colors.YELLOW}⚠️  Could not pull {image} (will build locally if needed){Colors.END}")

def main():
    # Parse command line arguments
    parser = argparse.ArgumentParser(description='Setup HPE NVIDIA Vista3D Frontend')
    parser.add_argument('--skip-sample-data', action='store_true', 
                        help='Skip sample data installation')
    parser.add_argument('--install-sample-data', action='store_true',
                        help='Automatically install sample data without prompting')
    parser.add_argument('--same-server', action='store_true',
                        help='All services on same server (skip prompt)')
    parser.add_argument('--split-deployment', action='store_true',
                        help='Split deployment with SSH tunnel (skip prompt)')
    args = parser.parse_args()
    
    print_header("HPE NVIDIA Vista3D Frontend & Image Server Setup")
    print()
    
    # Check we're in the right directory
    if not Path('docker-compose.yml').exists():
        print(f"{Colors.YELLOW}❌ docker-compose.yml not found{Colors.END}")
        print_info("Please run this script from the frontend directory")
        sys.exit(1)
    
    # Check Docker
    if not check_docker():
        print_info("Please install Docker and run this script again")
        sys.exit(1)
    
    # Ask about deployment type
    if args.same_server:
        deployment_type = '1'
    elif args.split_deployment:
        deployment_type = '2'
    else:
        deployment_type = ask_deployment_type()
    
    if deployment_type == '1':
        print_info("Configuration: All services on same server")
    else:
        print_info("Configuration: Split deployment with SSH tunnel")
    
    # Create directories
    dicom_folder, output_folder = create_directories()
    
    # Create .env file
    create_env_file(dicom_folder, output_folder, deployment_type)
    
    # Install sample data
    if args.skip_sample_data:
        print_info("Skipping sample data installation (--skip-sample-data flag)")
    elif args.install_sample_data:
        install_sample_data(dicom_folder, output_folder, skip_prompt=True)
    else:
        install_sample_data(dicom_folder, output_folder)
    
    # Pull Docker images
    pull_docker_images()
    
    # Final instructions
    print_header("✅ Setup Complete!")
    print()
    print_info("Configuration:")
    print_info(f"  • DICOM folder: {dicom_folder}")
    print_info(f"  • Output folder: {output_folder}")
    print_info("  • Image server: http://localhost:8888")
    
    if deployment_type == '1':
        print_info("  • Vista3D backend: http://vista3d-server-standalone:8000 (same server)")
        print()
        print_header("📋 Next Steps")
        print()
        print(f"{Colors.BOLD}1. Ensure Vista3D Backend is Running:{Colors.END}")
        print("   In the backend directory, run:")
        print(f"   {Colors.CYAN}cd ../backend && docker compose up -d{Colors.END}")
        print()
        print(f"{Colors.BOLD}2. Start Frontend & Image Server:{Colors.END}")
        print("   In this directory, run:")
        print(f"   {Colors.CYAN}docker compose up -d{Colors.END}")
        print()
        print(f"{Colors.BOLD}3. Access the Web Interface:{Colors.END}")
        print(f"   Open your browser to: {Colors.CYAN}http://localhost:8501{Colors.END}")
        print("   (or http://YOUR_SERVER_IP:8501 if accessing remotely)")
    else:
        print_info("  • Vista3D backend: http://localhost:8000 (via SSH tunnel)")
        print()
        print_header("📋 Next Steps")
        print()
        print(f"{Colors.BOLD}1. Connect to Remote Backend via SSH Tunnel:{Colors.END}")
        print("   Open a terminal and run:")
        print(f"   {Colors.CYAN}ssh -L 8000:localhost:8000 -R 8888:0.0.0.0:8888 user@remote-server{Colors.END}")
        print("   Keep this terminal open while using Vista3D")
        print()
        print(f"{Colors.BOLD}2. Start Frontend & Image Server:{Colors.END}")
        print("   In this directory, run:")
        print(f"   {Colors.CYAN}docker compose up -d{Colors.END}")
        print()
        print(f"{Colors.BOLD}3. Access the Web Interface:{Colors.END}")
        print(f"   Open your browser to: {Colors.CYAN}http://localhost:8501{Colors.END}")
    
    print()
    print(f"{Colors.BOLD}To Stop:{Colors.END}")
    print(f"   {Colors.CYAN}docker compose down{Colors.END}")
    print()

if __name__ == "__main__":
    main()

