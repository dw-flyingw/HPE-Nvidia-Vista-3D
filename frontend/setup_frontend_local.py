#!/usr/bin/env python3
"""
HPE NVIDIA Vista3D Local Frontend Setup Script

This script sets up the frontend and image server for local Mac execution.
The backend (Vista3D) runs on a remote Ubuntu server, connected via SSH tunnels.

Usage:
    python3 setup_frontend_local.py
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

class Colors:
    """ANSI color codes for terminal output"""
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    BOLD = '\033[1m'
    END = '\033[0m'

def print_header(text: str) -> None:
    print(f"\n{Colors.BOLD}{Colors.CYAN}{'='*70}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{text.center(70)}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{'='*70}{Colors.END}\n")

def print_success(text: str) -> None:
    print(f"{Colors.GREEN}✅ {text}{Colors.END}")

def print_error(text: str) -> None:
    print(f"{Colors.RED}❌ {text}{Colors.END}")

def print_warning(text: str) -> None:
    print(f"{Colors.YELLOW}⚠️  {text}{Colors.END}")

def print_info(text: str) -> None:
    print(f"{Colors.BLUE}ℹ️  {text}{Colors.END}")

def run_command(command: str, check: bool = True) -> subprocess.CompletedProcess:
    """Run a shell command"""
    try:
        result = subprocess.run(command, shell=True, check=check, capture_output=True, text=True)
        return result
    except subprocess.CalledProcessError as e:
        if check:
            print_error(f"Command failed: {command}")
            print_error(f"Error: {e}")
            sys.exit(1)
        return e

def check_system():
    """Check system requirements"""
    print_header("Checking System Requirements for Local Frontend")
    
    # Check OS
    system = platform.system().lower()
    if system == 'darwin':
        print_success(f"OS: {platform.system()} {platform.release()}")
    else:
        print_warning(f"Expected macOS, detected: {platform.system()}")
        print_info("This script is optimized for Mac, but should work on Linux too")
    
    # Check Python
    python_version = sys.version_info
    if python_version >= (3, 8):
        print_success(f"Python: {python_version.major}.{python_version.minor}.{python_version.micro}")
    else:
        print_error("Python 3.8+ required")
        sys.exit(1)
    
    # Check Docker (optional for local run)
    result = run_command("docker --version", check=False)
    if result.returncode == 0:
        print_success(f"Docker: {result.stdout.strip()} (optional)")
    else:
        print_warning("Docker not found (optional - needed only for containerized deployment)")

def get_config():
    """Get configuration from user"""
    print_header("Local Frontend Configuration")
    
    config = {}
    
    # Data directories
    print_info("Data directories (use absolute paths)")
    
    # DICOM folder
    default_dicom = os.path.expanduser("~/AI/HPE/dicom")
    dicom_path = input(f"\nDICOM folder path [{default_dicom}]: ").strip()
    config['DICOM_FOLDER'] = os.path.abspath(dicom_path if dicom_path else default_dicom)
    
    # Output folder
    default_output = os.path.expanduser("~/AI/HPE/output")
    output_path = input(f"Output folder path [{default_output}]: ").strip()
    config['OUTPUT_FOLDER'] = os.path.abspath(output_path if output_path else default_output)
    
    # Remote server info
    print_info("\nRemote Vista3D server information")
    print_info("You will connect to the remote backend via SSH tunnel")
    
    remote_server = input("Remote server hostname or IP: ").strip()
    if not remote_server:
        print_error("Remote server is required")
        sys.exit(1)
    config['REMOTE_SERVER'] = remote_server
    
    remote_user = input(f"Remote server username [{os.getenv('USER')}]: ").strip()
    config['REMOTE_USER'] = remote_user if remote_user else os.getenv('USER')
    
    # Set fixed values for local setup
    config['VISTA3D_SERVER'] = "http://localhost:8000"  # Via SSH forward tunnel
    config['IMAGE_SERVER'] = "http://localhost:8888"     # Local image server
    config['IMAGE_SERVER_PORT'] = "8888"
    config['FRONTEND_PORT'] = "8501"
    
    return config

def create_directories(config):
    """Create necessary directories"""
    print_header("Creating Directories")
    
    for key in ['DICOM_FOLDER', 'OUTPUT_FOLDER']:
        path = config[key]
        try:
            os.makedirs(path, exist_ok=True)
            print_success(f"Created: {path}")
        except Exception as e:
            print_error(f"Failed to create {path}: {e}")

def create_env_file(config):
    """Create .env file for frontend"""
    print_header("Creating Environment Configuration")
    
    # Frontend .env
    env_content = f"""# HPE NVIDIA Vista3D Local Frontend Configuration
# Generated by setup_frontend_local.py
#
# This frontend expects:
# - Backend running on remote Ubuntu server
# - SSH tunnels: -L 8000:localhost:8000 -R 8888:localhost:8888
# - Local image server running on port 8888

# Data Directories (on local Mac)
DICOM_FOLDER="{config['DICOM_FOLDER']}"
OUTPUT_FOLDER="{config['OUTPUT_FOLDER']}"

# Server URLs (via SSH tunnels)
VISTA3D_SERVER="{config['VISTA3D_SERVER']}"
IMAGE_SERVER="{config['IMAGE_SERVER']}"

# Ports
IMAGE_SERVER_PORT="{config['IMAGE_SERVER_PORT']}"
FRONTEND_PORT="{config['FRONTEND_PORT']}"

# Remote Server Info (for reference)
REMOTE_SERVER="{config['REMOTE_SERVER']}"
REMOTE_USER="{config['REMOTE_USER']}"

# Vessel Configuration
VESSELS_OF_INTEREST="all"

# Docker Configuration
COMPOSE_PROJECT_NAME=vista3d-frontend
"""
    
    env_file = os.path.join(os.getcwd(), '.env')
    try:
        with open(env_file, 'w') as f:
            f.write(env_content)
        print_success(f"Created: {env_file}")
    except Exception as e:
        print_error(f"Failed to create .env file: {e}")
    
    # Image server .env
    image_server_dir = os.path.join(os.getcwd(), "..", "image_server")
    if os.path.exists(image_server_dir):
        image_server_env_content = f"""# HPE NVIDIA Vista3D Image Server Configuration
# Generated by setup_frontend_local.py

# Data Directories
DICOM_FOLDER="{config['DICOM_FOLDER']}"
OUTPUT_FOLDER="{config['OUTPUT_FOLDER']}"

# Server Configuration
IMAGE_SERVER="{config['IMAGE_SERVER']}"
IMAGE_SERVER_PORT="{config['IMAGE_SERVER_PORT']}"

# Docker Configuration
COMPOSE_PROJECT_NAME=vista3d-image-server
"""
        
        image_server_env = os.path.join(image_server_dir, '.env')
        try:
            with open(image_server_env, 'w') as f:
                f.write(image_server_env_content)
            print_success(f"Created: {image_server_env}")
        except Exception as e:
            print_error(f"Failed to create image server .env: {e}")

def create_ssh_tunnel_script(config):
    """Create SSH tunnel helper script"""
    print_header("Creating SSH Tunnel Script")
    
    script_content = f'''#!/bin/bash
# HPE NVIDIA Vista3D SSH Tunnel Script
# 
# This script creates the necessary SSH tunnels to connect your Mac to the remote backend
# - Forward tunnel: Local port 8000 -> Remote Vista3D (port 8000)
# - Reverse tunnel: Remote port 8888 -> Local image server (port 8888)

REMOTE_SERVER="{config['REMOTE_SERVER']}"
REMOTE_USER="{config['REMOTE_USER']}"

echo "🔐 Creating SSH tunnels to remote Vista3D backend..."
echo "   Remote server: $REMOTE_USER@$REMOTE_SERVER"
echo ""
echo "Tunnels:"
echo "  -L 8000:localhost:8000  (Forward: Access remote Vista3D from Mac)"
echo "  -R 8888:localhost:8888  (Reverse: Remote Vista3D -> Mac image server)"
echo ""
echo "Keep this terminal open while using Vista3D"
echo "Press Ctrl+C to disconnect"
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# SSH with tunnels and keep-alive
ssh -o ServerAliveInterval=60 \\
    -o ServerAliveCountMax=3 \\
    -o ExitOnForwardFailure=yes \\
    -L 8000:localhost:8000 \\
    -R 8888:localhost:8888 \\
    $REMOTE_USER@$REMOTE_SERVER

echo ""
echo "Disconnected from $REMOTE_SERVER"
'''
    
    script_path = os.path.join(os.getcwd(), 'connect_to_backend.sh')
    try:
        with open(script_path, 'w') as f:
            f.write(script_content)
        os.chmod(script_path, 0o755)
        print_success(f"Created: {script_path}")
    except Exception as e:
        print_error(f"Failed to create SSH tunnel script: {e}")

def create_startup_scripts(config):
    """Create startup scripts"""
    print_header("Creating Startup Scripts")
    
    # Script to start image server
    image_server_script = '''#!/bin/bash
# Start the local image server

set -e

cd "$(dirname "$0")/../image_server"

echo "🖼️  Starting local image server..."

if [ -f ".env" ]; then
    # Check if Docker is available
    if command -v docker &> /dev/null; then
        echo "Using Docker..."
        docker-compose up -d
        echo "✅ Image server started (Docker)"
        echo "📊 Check logs: docker-compose logs -f"
    else
        echo "Docker not found. Starting with Python..."
        if [ -f "server.py" ]; then
            python3 server.py &
            echo $! > .image_server.pid
            echo "✅ Image server started (Python)"
            echo "📊 Check logs: tail -f nohup.out"
        else
            echo "❌ server.py not found"
            exit 1
        fi
    fi
else
    echo "❌ .env file not found"
    exit 1
fi

echo "🌐 Image server: http://localhost:8888"
'''
    
    start_image_server = os.path.join(os.getcwd(), 'start_image_server.sh')
    try:
        with open(start_image_server, 'w') as f:
            f.write(image_server_script)
        os.chmod(start_image_server, 0o755)
        print_success(f"Created: {start_image_server}")
    except Exception as e:
        print_error(f"Failed to create image server script: {e}")
    
    # Script to start frontend
    frontend_script = '''#!/bin/bash
# Start the local frontend

set -e

cd "$(dirname "$0")"

echo "🌐 Starting local frontend..."

if [ -f ".env" ]; then
    # Load environment
    export $(cat .env | grep -v '^#' | xargs)
    
    # Check if we should use Docker or native
    if command -v streamlit &> /dev/null; then
        echo "Using native Streamlit..."
        streamlit run app.py --server.port ${FRONTEND_PORT:-8501}
    elif command -v docker &> /dev/null; then
        echo "Streamlit not found locally. Using Docker..."
        docker-compose up
    else
        echo "❌ Neither Streamlit nor Docker found"
        echo "Install Streamlit: pip install streamlit"
        exit 1
    fi
else
    echo "❌ .env file not found"
    exit 1
fi
'''
    
    start_frontend = os.path.join(os.getcwd(), 'start_frontend.sh')
    try:
        with open(start_frontend, 'w') as f:
            f.write(frontend_script)
        os.chmod(start_frontend, 0o755)
        print_success(f"Created: {start_frontend}")
    except Exception as e:
        print_error(f"Failed to create frontend script: {e}")
    
    # Master startup script
    master_script = f'''#!/bin/bash
# Master startup script for Vista3D local frontend
# This script helps you start all services in the correct order

echo "🚀 Vista3D Local Frontend Startup"
echo ""

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "Step 1: Connect to Remote Backend"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "You need to establish SSH tunnels to the remote backend."
echo "Open a new terminal and run:"
echo ""
echo "  cd $SCRIPT_DIR"
echo "  ./connect_to_backend.sh"
echo ""
echo "Or manually run:"
echo "  ssh -L 8000:localhost:8000 -R 8888:localhost:8888 {config['REMOTE_USER']}@{config['REMOTE_SERVER']}"
echo ""
read -p "Press Enter when SSH tunnel is connected..."

echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "Step 2: Start Local Image Server"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

"$SCRIPT_DIR/start_image_server.sh" &
sleep 3

echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "Step 3: Start Local Frontend"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "Starting frontend..."
echo ""

"$SCRIPT_DIR/start_frontend.sh"
'''
    
    start_all = os.path.join(os.getcwd(), 'start_all.sh')
    try:
        with open(start_all, 'w') as f:
            f.write(master_script)
        os.chmod(start_all, 0o755)
        print_success(f"Created: {start_all}")
    except Exception as e:
        print_error(f"Failed to create master startup script: {e}")

def main():
    print_header("HPE NVIDIA Vista3D - Local Frontend Setup")
    print_info("This script configures the frontend and image server for your Mac")
    print_info("The Vista3D backend runs on a remote Ubuntu server")
    print("")
    
    # Check we're in the right directory
    if not os.path.exists('app.py'):
        print_error("app.py not found")
        print_info("Please run this script from the frontend directory")
        sys.exit(1)
    
    # Check system
    check_system()
    
    # Get configuration
    config = get_config()
    
    # Create directories
    create_directories(config)
    
    # Create .env files
    create_env_file(config)
    
    # Create SSH tunnel script
    create_ssh_tunnel_script(config)
    
    # Create startup scripts
    create_startup_scripts(config)
    
    # Final instructions
    print_header("Setup Complete!")
    print_success("Local frontend setup completed successfully!")
    print("")
    print_info("Configuration Summary:")
    print_info(f"  DICOM folder: {config['DICOM_FOLDER']}")
    print_info(f"  Output folder: {config['OUTPUT_FOLDER']}")
    print_info(f"  Remote server: {config['REMOTE_USER']}@{config['REMOTE_SERVER']}")
    print_info(f"  Vista3D server: {config['VISTA3D_SERVER']} (via SSH tunnel)")
    print_info(f"  Image server: {config['IMAGE_SERVER']} (local)")
    print("")
    print_info("Next Steps:")
    print_info("")
    print_info("  1. Connect to remote backend:")
    print_info("     ./connect_to_backend.sh")
    print_info("     (Keep that terminal open)")
    print("")
    print_info("  2. In a new terminal, start image server:")
    print_info("     ./start_image_server.sh")
    print("")
    print_info("  3. In another terminal, start frontend:")
    print_info("     ./start_frontend.sh")
    print("")
    print_info("  4. Open browser: http://localhost:8501")
    print("")
    print_info("  OR use the master script:")
    print_info("     ./start_all.sh")
    print("")
    print_info("📚 See docs/REMOTE_BACKEND_SETUP.md for detailed instructions")

if __name__ == "__main__":
    main()

