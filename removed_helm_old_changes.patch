diff --git a/.genkit/traces_idx/genkit.metadata b/.genkit/traces_idx/genkit.metadata
deleted file mode 100644
index d297703..0000000
--- a/.genkit/traces_idx/genkit.metadata
+++ /dev/null
@@ -1 +0,0 @@
-{"version":"1.21.0"}
\ No newline at end of file
diff --git a/backend/setup.py b/backend/setup.py
index 153bc73..0ab00ab 100755
--- a/backend/setup.py
+++ b/backend/setup.py
@@ -137,6 +137,7 @@ OUTPUT_FOLDER={output_folder}
 # Server Configuration
 VISTA3D_SERVER=http://localhost:8000
 IMAGE_SERVER=http://localhost:8888
+VISTA3D_IMAGE_SERVER_URL=http://host.docker.internal:8888
 
 # Docker Configuration
 COMPOSE_PROJECT_NAME=vista3d-backend
diff --git a/frontend/Dockerfile b/frontend/Dockerfile
index 63f7443..be7bed1 100644
--- a/frontend/Dockerfile
+++ b/frontend/Dockerfile
@@ -1,4 +1,4 @@
-FROM python:3.11-slim
+FROM --platform=linux/arm64 python:3.11-slim
 
 WORKDIR /app
 
diff --git a/frontend/Tools.py b/frontend/Tools.py
index 2a34414..fe89a42 100644
--- a/frontend/Tools.py
+++ b/frontend/Tools.py
@@ -455,10 +455,10 @@ def render_smoothing_tools():
     """Render voxel smoothing tools."""
     st.subheader("âœ¨ Voxel Smoothing")
     st.markdown("""
-    Apply Gaussian smoothing to segmented voxel files to reduce blockiness and improve anatomical accuracy.
+    Apply binary morphological smoothing to segmented voxel files to reduce blockiness and improve anatomical accuracy.
     This tool smooths the voxel segmentations created by Vista3D to make them appear more natural and less blocky.
     
-    **Note:** Vista3D segmentations have continuous values (0-62), so stronger smoothing is needed for visible effects.
+    **How it works:** The tool preserves discrete label IDs while smoothing the surface geometry using morphological operations and Gaussian blur on binary masks. This creates smooth 3D surfaces that work correctly with NiiVue's isosurface rendering.
     """)
     
     # Smoothing options
@@ -544,18 +544,18 @@ def render_smoothing_tools():
         
         # Smoothing level selection
         smoothing_options = {
-            "Light (4mm FWHM)": "light",
-            "Medium (8mm FWHM)": "medium",
-            "Heavy (12mm FWHM)": "heavy",
-            "Extra Heavy (20mm FWHM)": "extra_heavy",
-            "Ultra Heavy (50mm FWHM) - Very Smooth": "ultra_heavy"
+            "Light (Small Kernel)": "light",
+            "Medium (Medium Kernel)": "medium",
+            "Heavy (Large Kernel)": "heavy",
+            "Extra Heavy (Very Large Kernel)": "extra_heavy",
+            "Ultra Heavy (Maximum Kernel) - Very Smooth": "ultra_heavy"
         }
         
         smoothing_display = st.selectbox(
             "Smoothing Level",
             options=list(smoothing_options.keys()),
             index=1,  # Default to Medium
-            help="Select the smoothing strength. Medium is recommended for most cases."
+            help="Select the smoothing strength based on kernel size. Medium is recommended for most cases. Larger kernels create smoother surfaces but may lose fine details."
         )
         smoothing_level = smoothing_options[smoothing_display]
     
@@ -884,8 +884,8 @@ def main():
     
     st.markdown("---")
     
-    # Voxel Smoothing Section
-    render_smoothing_tools()
+    # Voxel Smoothing Section - COMMENTED OUT
+    # render_smoothing_tools()
     
     
     # Render badges in sidebar
diff --git a/frontend/utils/smooth_voxels.py b/frontend/utils/smooth_voxels.py
index 6f9c87c..1196982 100644
--- a/frontend/utils/smooth_voxels.py
+++ b/frontend/utils/smooth_voxels.py
@@ -26,13 +26,13 @@ sys.path.append(str(Path(__file__).parent))
 from constants import MIN_FILE_SIZE_MB
 
 
-# Smoothing presets (FWHM in mm)
+# Smoothing presets (kernel sizes for morphological operations)
 SMOOTHING_PRESETS = {
-    'light': 4.0,
-    'medium': 8.0,   
-    'heavy': 12.0,
-    'extra_heavy': 20.0,
-    'ultra_heavy': 50.0  # For very visible smoothing effects
+    'light': 3,      # Small kernel - gentle smoothing
+    'medium': 5,     # Medium kernel - moderate smoothing  
+    'heavy': 7,      # Large kernel - strong smoothing
+    'extra_heavy': 9, # Very large kernel - very strong smoothing
+    'ultra_heavy': 11 # Extra large kernel - maximum smoothing
 }
 
 
@@ -79,14 +79,14 @@ def get_voxel_files(patient_id: str, scan_name: str, output_folder: Path):
     return sorted(voxel_files)
 
 
-def smooth_voxel_file(file_path: Path, fwhm: float, method: str = "gaussian"):
+def smooth_voxel_file(file_path: Path, kernel_size: int, method: str = "morphological"):
     """
     Apply smoothing to a voxel file and overwrite it.
     
     Args:
         file_path: Path to the voxel NIfTI file
-        fwhm: Full-Width Half Maximum for Gaussian kernel (in mm) or kernel size for morphological
-        method: Smoothing method - "gaussian" or "morphological"
+        kernel_size: Kernel size for morphological operations (integer)
+        method: Smoothing method - "gaussian" or "morphological" (default: morphological)
     
     Returns:
         bool: True if successful, False otherwise
@@ -97,7 +97,7 @@ def smooth_voxel_file(file_path: Path, fwhm: float, method: str = "gaussian"):
         data = img.get_fdata()
         
         if method == "morphological":
-            # Morphological smoothing (better for isosurface rendering)
+            # Enhanced binary morphological smoothing for segmentation voxels
             from scipy import ndimage
             import numpy as np
             
@@ -113,27 +113,32 @@ def smooth_voxel_file(file_path: Path, fwhm: float, method: str = "gaussian"):
                 label_id = non_zero_vals[0] if len(non_zero_vals) == 1 else int(np.median(non_zero_vals))
                 
                 # Create binary mask
-                binary_mask = (data > 0).astype(np.uint8)
+                binary_mask = (data > 0).astype(np.float32)
                 
-                # Apply morphological operations
-                kernel_size = max(3, int(fwhm))
+                # Step 1: Morphological opening to remove small protrusions
+                structure = np.ones((kernel_size, kernel_size, kernel_size))
+                opened = ndimage.binary_opening(binary_mask, structure=structure)
                 
-                # Opening: erosion followed by dilation (removes small protrusions)
-                opened = ndimage.binary_opening(binary_mask, structure=np.ones((kernel_size, kernel_size, kernel_size)))
+                # Step 2: Morphological closing to fill small holes
+                closed = ndimage.binary_closing(opened, structure=structure)
                 
-                # Closing: dilation followed by erosion (fills small holes)
-                closed = ndimage.binary_closing(opened, structure=np.ones((kernel_size+2, kernel_size+2, kernel_size+2)))
+                # Step 3: Apply Gaussian filter to smooth the boundary
+                # Use sigma proportional to kernel size for consistent smoothing
+                sigma = kernel_size / 3.0
+                gaussian_smoothed = ndimage.gaussian_filter(closed.astype(np.float32), sigma=sigma)
                 
-                # Additional smoothing with larger kernel
-                smoothed_mask = ndimage.binary_closing(closed, structure=np.ones((kernel_size+4, kernel_size+4, kernel_size+4)))
+                # Step 4: Threshold to get clean binary mask
+                smoothed_mask = (gaussian_smoothed > 0.5).astype(np.uint8)
                 
-                # Convert back to label ID format
-                smoothed_data = smoothed_mask.astype(np.uint8) * label_id
+                # Step 5: Convert back to label ID format
+                smoothed_data = smoothed_mask.astype(np.int16) * label_id
                 
                 # Create new image
                 smoothed_img = nib.Nifti1Image(smoothed_data, img.affine, img.header)
         else:
-            # Gaussian smoothing
+            # Gaussian smoothing (fallback for continuous data)
+            # Convert kernel size to approximate FWHM for Gaussian smoothing
+            fwhm = kernel_size * 2.0  # Rough approximation
             smoothed_img = nimage.smooth_img(img, fwhm=fwhm)
         
         # Save back to the same file (overwrite)
@@ -171,13 +176,13 @@ def process_patients(patient_ids: list, selected_scans: list, smoothing_level: s
         smoothing_level: Smoothing preset level ('light', 'medium', 'heavy')
         output_folder: Path to output folder
     """
-    # Get FWHM value from preset
-    fwhm = SMOOTHING_PRESETS.get(smoothing_level, SMOOTHING_PRESETS['medium'])
+    # Get kernel size from preset
+    kernel_size = SMOOTHING_PRESETS.get(smoothing_level, SMOOTHING_PRESETS['medium'])
     
     print("=" * 80)
     print("Voxel Smoothing Tool")
     print("=" * 80)
-    print(f"Smoothing level: {smoothing_level} (FWHM: {fwhm}mm)")
+    print(f"Smoothing level: {smoothing_level} (Kernel size: {kernel_size})")
     print(f"Processing {len(patient_ids)} patient(s)")
     print("=" * 80)
     
@@ -226,7 +231,7 @@ def process_patients(patient_ids: list, selected_scans: list, smoothing_level: s
             # Process each voxel file with progress bar
             for voxel_file in tqdm(voxel_files, desc=f"    Smoothing", unit="file"):
                 total_files += 1
-                if smooth_voxel_file(voxel_file, fwhm):
+                if smooth_voxel_file(voxel_file, kernel_size):
                     successful_files += 1
                 else:
                     failed_files += 1
@@ -247,7 +252,7 @@ def process_patients(patient_ids: list, selected_scans: list, smoothing_level: s
 def main():
     """Main function for command-line execution."""
     parser = argparse.ArgumentParser(
-        description="Apply Gaussian smoothing to Vista3D voxel segmentations"
+        description="Apply binary morphological smoothing to Vista3D voxel segmentations"
     )
     parser.add_argument(
         'patients',
@@ -258,7 +263,7 @@ def main():
         '--smoothing',
         choices=['light', 'medium', 'heavy', 'extra_heavy', 'ultra_heavy'],
         default='medium',
-        help='Smoothing level preset (default: medium)'
+        help='Smoothing level preset - kernel size for morphological operations (default: medium)'
     )
     
     args = parser.parse_args()
diff --git a/helm/build_and_push_docker.sh b/helm/build_and_push_docker.sh
new file mode 100755
index 0000000..e40482d
--- /dev/null
+++ b/helm/build_and_push_docker.sh
@@ -0,0 +1,72 @@
+#!/bin/bash
+
+# Docker Build and Push Script for Vista3D
+# This script builds and pushes both the image_server and frontend Docker images
+# For Linux ARM64 platform
+
+set -e  # Exit on error
+
+# Configuration
+DOCKER_USERNAME="dwtwp"
+VERSION="${1:-v1.0.0}"  # Default to v1.0.0 if no version specified
+PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
+
+# Colors for output
+RED='\033[0;31m'
+GREEN='\033[0;32m'
+YELLOW='\033[1;33m'
+NC='\033[0m' # No Color
+
+echo -e "${GREEN}=== Vista3D Docker Build and Push Script ===${NC}"
+echo -e "Version: ${YELLOW}${VERSION}${NC}"
+echo -e "Docker Username: ${YELLOW}${DOCKER_USERNAME}${NC}"
+echo ""
+
+# Check if logged into Docker Hub
+echo -e "${YELLOW}Checking Docker Hub login...${NC}"
+if ! grep -q "docker.io" ~/.docker/config.json 2>/dev/null; then
+    echo -e "${RED}Not logged into Docker Hub. Please run: docker login${NC}"
+    exit 1
+fi
+echo -e "${GREEN}âœ“ Docker Hub login confirmed${NC}"
+echo ""
+
+# Function to build and push an image
+build_and_push() {
+    local service_name=$1
+    local service_path=$2
+    local image_name="${DOCKER_USERNAME}/vista3d-${service_name}"
+    
+    echo -e "${GREEN}=== Building ${service_name} ===${NC}"
+    cd "${PROJECT_ROOT}/${service_path}"
+    
+    echo "Building ${image_name}:${VERSION}..."
+    docker build -t "${image_name}:${VERSION}" .
+    
+    echo "Tagging as latest..."
+    docker tag "${image_name}:${VERSION}" "${image_name}:latest"
+    
+    echo "Pushing ${image_name}:${VERSION}..."
+    docker push "${image_name}:${VERSION}"
+    
+    echo "Pushing ${image_name}:latest..."
+    docker push "${image_name}:latest"
+    
+    echo -e "${GREEN}âœ“ Successfully built and pushed ${service_name}${NC}"
+    echo ""
+}
+
+# Build and push image_server
+build_and_push "image-server" "../image_server"
+
+# Build and push frontend
+build_and_push "frontend" "../frontend"
+
+echo -e "${GREEN}=== All images built and pushed successfully! ===${NC}"
+echo ""
+echo "Images pushed:"
+echo "  - ${DOCKER_USERNAME}/vista3d-image-server:${VERSION}"
+echo "  - ${DOCKER_USERNAME}/vista3d-image-server:latest"
+echo "  - ${DOCKER_USERNAME}/vista3d-frontend:${VERSION}"
+echo "  - ${DOCKER_USERNAME}/vista3d-frontend:latest"
+
diff --git a/helm/icon.png b/helm/icon.png
new file mode 100644
index 0000000..17d3033
Binary files /dev/null and b/helm/icon.png differ
diff --git a/helm/vista3d/templates/backend-deployment.yaml b/helm/vista3d/templates/backend-deployment.yaml
index 29a203b..c449d4b 100644
--- a/helm/vista3d/templates/backend-deployment.yaml
+++ b/helm/vista3d/templates/backend-deployment.yaml
@@ -24,8 +24,7 @@ spec:
         app.kubernetes.io/component: backend
         app.kubernetes.io/part-of: vista3d
         app.kubernetes.io/managed-by: {{ .Release.Service }}
-      annotations:
-        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
+      annotations: {}
     spec:
       {{- with .Values.global.imagePullSecrets }}
       imagePullSecrets:
diff --git a/helm/vista3d/templates/frontend-deployment.yaml b/helm/vista3d/templates/frontend-deployment.yaml
index 1f78ecd..b1bf49c 100644
--- a/helm/vista3d/templates/frontend-deployment.yaml
+++ b/helm/vista3d/templates/frontend-deployment.yaml
@@ -17,6 +17,12 @@ spec:
       labels:
         {{- include "vista3d.selectorLabels" . | nindent 8 }}
         app.kubernetes.io/component: frontend
+<<<<<<< HEAD
+=======
+        app.kubernetes.io/part-of: vista3d
+        app.kubernetes.io/managed-by: {{ .Release.Service }}
+      annotations: {}
+>>>>>>> ec8d467d0dde6fde08f0336e31dae58a022d5309
     spec:
       containers:
         - name: {{ .Values.frontend.name }}
diff --git a/helm/vista3d/templates/image-server-deployment.yaml b/helm/vista3d/templates/image-server-deployment.yaml
index 7f84ef4..c8b10a3 100644
--- a/helm/vista3d/templates/image-server-deployment.yaml
+++ b/helm/vista3d/templates/image-server-deployment.yaml
@@ -17,6 +17,12 @@ spec:
       labels:
         {{- include "vista3d.selectorLabels" . | nindent 8 }}
         app.kubernetes.io/component: image-server
+<<<<<<< HEAD
+=======
+        app.kubernetes.io/part-of: vista3d
+        app.kubernetes.io/managed-by: {{ .Release.Service }}
+      annotations: {}
+>>>>>>> ec8d467d0dde6fde08f0336e31dae58a022d5309
     spec:
       containers:
         - name: {{ .Values.imageServer.name }}
diff --git a/helm/vista3d/values.yaml b/helm/vista3d/values.yaml
index 8bf73ba..aad4ddd 100644
--- a/helm/vista3d/values.yaml
+++ b/helm/vista3d/values.yaml
@@ -2,10 +2,21 @@
 # This is a YAML-formatted file.
 # Declare variables to be passed into your templates.
 
+<<<<<<< HEAD
+=======
+replicaCount: 1
+namespace: "vista3d"
+
+# Global configuration
+>>>>>>> ec8d467d0dde6fde08f0336e31dae58a022d5309
 global:
   imageRegistry: ""
   imagePullSecrets: []
 
+<<<<<<< HEAD
+=======
+# Backend (Vista3D Server) configuration
+>>>>>>> ec8d467d0dde6fde08f0336e31dae58a022d5309
 backend:
   enabled: false
   name: vista3d-backend
@@ -18,6 +29,29 @@ backend:
     type: ClusterIP
     port: 8000
     targetPort: 8000
+<<<<<<< HEAD
+=======
+    protocol: TCP
+    name: backend-service
+  
+  resources:
+    limits:
+      nvidia.com/gpu: 1
+      memory: "16Gi"
+      cpu: "4"
+    requests:
+      nvidia.com/gpu: 1
+      memory: "8Gi"
+      cpu: "2"
+  
+  nodeSelector:
+    nvidia.com/gpu: "true"
+  
+  tolerations:
+    - key: nvidia.com/gpu
+      operator: Exists
+      effect: NoSchedule
+>>>>>>> ec8d467d0dde6fde08f0336e31dae58a022d5309
 
 frontend:
   enabled: true
@@ -31,6 +65,7 @@ frontend:
     type: ClusterIP
     port: 8501
     targetPort: 8501
+<<<<<<< HEAD
   env:
     IMAGE_SERVER: "http://vista3d-image-server:8888"
     EXTERNAL_IMAGE_SERVER: "http://vista3d-image-server:8888"
@@ -45,6 +80,18 @@ frontend:
       mountPath: /app/output
     - name: dicom-data
       mountPath: /app/dicom
+=======
+    protocol: TCP
+    name: frontend-service
+  
+  resources:
+    limits:
+      memory: "4Gi"
+      cpu: "2"
+    requests:
+      memory: "2Gi"
+      cpu: "1"
+>>>>>>> ec8d467d0dde6fde08f0336e31dae58a022d5309
 
 imageServer:
   enabled: true
@@ -58,6 +105,7 @@ imageServer:
     type: ClusterIP
     port: 8888
     targetPort: 8888
+<<<<<<< HEAD
   env:
     OUTPUT_FOLDER: "/data/output"
     DICOM_FOLDER: "/data/dicom"
@@ -71,15 +119,47 @@ imageServer:
     - name: dicom-data
       mountPath: /data/dicom
       readOnly: true
+=======
+    protocol: TCP
+    name: image-server-service
+  
+  resources:
+    limits:
+      memory: "2Gi"
+      cpu: "1"
+    requests:
+      memory: "1Gi"
+      cpu: "0.5"
+>>>>>>> ec8d467d0dde6fde08f0336e31dae58a022d5309
 
 persistence:
   enabled: true
+<<<<<<< HEAD
+  output:
+    enabled: true
+=======
+  existingClaim: ""
+  mountPath: "/data"
+  subPath: ""
+  
   output:
     enabled: true
+    existingClaim: ""
+    mountPath: "/workspace/output"
+    subPath: ""
+    storageClass: ""
+>>>>>>> ec8d467d0dde6fde08f0336e31dae58a022d5309
     accessMode: ReadWriteOnce
     size: 100Gi
   dicom:
     enabled: true
+<<<<<<< HEAD
+=======
+    existingClaim: ""
+    mountPath: "/workspace/dicom"
+    subPath: ""
+    storageClass: ""
+>>>>>>> ec8d467d0dde6fde08f0336e31dae58a022d5309
     accessMode: ReadOnlyMany
     size: 50Gi
 
@@ -92,6 +172,7 @@ serviceAccount:
   annotations: {}
   name: ""
 
+<<<<<<< HEAD
 secrets:
   create: true
   ngcApiKey: "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" # User must provide their NGC API Key here or via --set
@@ -105,4 +186,51 @@ ingress:
       paths:
         - path: /
           pathType: Prefix
-  tls: []
\ No newline at end of file
+  tls: []
+=======
+# Global environment variables
+env:
+  PYTHONUNBUFFERED: "1"
+  HTTP_PROXY: ""
+  HTTPS_PROXY: ""
+  NO_PROXY: "localhost,127.0.0.1,0.0.0.0,::1,frontend-service,backend-service,image-server-service"
+  REQUESTS_CA_BUNDLE: ""
+  CURL_CA_BUNDLE: ""
+
+# API Key configuration
+apiKey:
+  value: "vista3d-api-key"
+
+# Pod Security Context
+podSecurityContext:
+  fsGroup: 1000
+  runAsUser: 1000
+  runAsNonRoot: true
+
+# Security Context
+securityContext:
+  allowPrivilegeEscalation: false
+  capabilities:
+    drop:
+    - ALL
+  readOnlyRootFilesystem: false
+  runAsNonRoot: true
+  runAsUser: 1000
+
+# Node selection
+nodeSelector: {}
+
+# Tolerations
+tolerations: []
+
+# Affinity
+affinity: {}
+
+# EZUA configuration
+ezua:
+  enabled: true
+  virtualService:
+    endpoint: "vista3d.${DOMAIN_NAME}"
+    backendEndpoint: "vista3d-backend.${DOMAIN_NAME}"
+    istioGateway: "istio-system/ezaf-gateway"
+>>>>>>> ec8d467d0dde6fde08f0336e31dae58a022d5309
diff --git a/image_server/Dockerfile b/image_server/Dockerfile
index f50f5a0..e78112e 100644
--- a/image_server/Dockerfile
+++ b/image_server/Dockerfile
@@ -1,4 +1,4 @@
-FROM python:3.11-slim
+FROM --platform=linux/arm64 python:3.11-slim
 
 WORKDIR /srv
 
