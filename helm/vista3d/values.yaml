# Default values for vista3d
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Image configuration
images:
  frontend:
    repository: dwtwp/vista3d-frontend
    tag: latest
    pullPolicy: IfNotPresent
  
  imageServer:
    repository: dwtwp/vista3d-image-server
    tag: latest
    pullPolicy: IfNotPresent
  
  backend:
    repository: nvcr.io/nim/nvidia/vista3d
    tag: "1.0.0"
    pullPolicy: IfNotPresent

# Backend (Vista3D Server) configuration
backend:
  enabled: true
  name: vista3d-backend
  
  replicaCount: 1
  
  image:
    repository: nvcr.io/nim/nvidia/vista3d
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
  
  resources:
    limits:
      nvidia.com/gpu: 1
      memory: "16Gi"
      cpu: "4"
    requests:
      nvidia.com/gpu: 1
      memory: "8Gi"
      cpu: "2"
  
  nodeSelector:
    nvidia.com/gpu: "true"
  
  tolerations:
    - key: nvidia.com/gpu
      operator: Exists
      effect: NoSchedule
  
  env:
    - name: NGC_API_KEY
      valueFrom:
        secretKeyRef:
          name: vista3d-secrets
          key: ngc-api-key
    - name: NGC_ORG_ID
      value: "nvidia"
    - name: LOCAL_NIM_CACHE
      value: "/workspace/.cache/nim"
    - name: VISTA3D_SERVER
      value: "http://localhost:8000"
    - name: WORKSPACE_IMAGES_PATH
      value: "/workspace/output/nifti"
    - name: WORKSPACE_OUTPUTS_PATH
      value: "/workspace/output"
    - name: WORKSPACE_ROOT
      value: "/workspace"
    - name: CUDA_VISIBLE_DEVICES
      value: "0"
    - name: NVIDIA_VISIBLE_DEVICES
      value: "0"
    - name: NVIDIA_DRIVER_CAPABILITIES
      value: "compute,utility"
    - name: SUPPORTED_IMAGE_EXT
      value: '".nrrd",".nii",".nii.gz",".dcm"'
    - name: IMAGE_SERVER
      value: "http://vista3d-image-server:8888"
    - name: ALLOW_LOCAL_FILES
      value: "True"
    - name: ENABLE_FILE_ACCESS
      value: "True"
    - name: ALLOW_ABSOLUTE_PATHS
      value: "True"
    - name: ALLOW_RELATIVE_PATHS
      value: "True"
    - name: ALLOW_FILE_PROTOCOL
      value: "True"
    - name: ALLOW_LOCAL_PATHS
      value: "True"
    - name: CORS_ALLOW_ORIGINS
      value: "*"
    - name: CORS_ALLOW_METHODS
      value: "GET,POST,PUT,DELETE,OPTIONS"
    - name: CORS_ALLOW_HEADERS
      value: "*"
    - name: CORS_ALLOW_CREDENTIALS
      value: "True"
  
  volumeMounts:
    - name: output-data
      mountPath: /workspace/output

# Frontend (Streamlit App) configuration
frontend:
  enabled: true
  name: vista3d-frontend
  
  replicaCount: 1
  
  image:
    repository: dwtwp/vista3d-frontend
    tag: latest
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 8501
    targetPort: 8501
  
  resources:
    limits:
      memory: "4Gi"
      cpu: "2"
    requests:
      memory: "2Gi"
      cpu: "1"
  
  env:
    - name: IMAGE_SERVER
      value: "http://vista3d-image-server:8888"
    - name: EXTERNAL_IMAGE_SERVER
      value: "http://vista3d-image-server:8888"
    - name: OUTPUT_FOLDER
      value: "/app/output"
    - name: DICOM_FOLDER
      value: "/app/dicom"
    - name: VISTA3D_SERVER
      value: "http://vista3d-backend:8000"
    - name: VISTA3D_IMAGE_SERVER_URL
      value: "http://vista3d-image-server:8888"
    - name: DOCKER_CONTAINER
      value: "false"
    - name: STREAMLIT_SERVER_RUN_ON_SAVE
      value: "true"
    - name: STREAMLIT_SERVER_FILE_WATCHER_TYPE
      value: "auto"
  
  volumeMounts:
    - name: output-data
      mountPath: /app/output
    - name: dicom-data
      mountPath: /app/dicom

# Image Server configuration
imageServer:
  enabled: true
  name: vista3d-image-server
  
  replicaCount: 1
  
  image:
    repository: dwtwp/vista3d-image-server
    tag: latest
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 8888
    targetPort: 8888
  
  resources:
    limits:
      memory: "2Gi"
      cpu: "1"
    requests:
      memory: "1Gi"
      cpu: "0.5"
  
  env:
    - name: OUTPUT_FOLDER
      value: "/data/output"
    - name: DICOM_FOLDER
      value: "/data/dicom"
    - name: IMAGE_SERVER
      value: "http://localhost:8888"
    - name: PYTHONUNBUFFERED
      value: "1"
    - name: PYTHONDONTWRITEBYTECODE
      value: "1"
  
  volumeMounts:
    - name: output-data
      mountPath: /data/output
      readOnly: true
    - name: dicom-data
      mountPath: /data/dicom
      readOnly: true

# Ingress configuration
ingress:
  enabled: false
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "500m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/client-max-body-size: "500m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
  hosts:
    - host: vista3d.local
      paths:
        - path: /
          pathType: Prefix
          service: vista3d-frontend
        - path: /api/vista3d
          pathType: Prefix
          service: vista3d-backend
        - path: /images
          pathType: Prefix
          service: vista3d-image-server
        - path: /health
          pathType: Prefix
          service: vista3d-image-server
  tls: []

# Persistent Volume configuration
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteMany
  size: 100Gi
  
  output:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 100Gi
  
  dicom:
    enabled: true
    storageClass: ""
    accessMode: ReadOnlyMany
    size: 50Gi

# Secrets configuration
secrets:
  create: true
  ngcApiKey: ""
  # You can also provide existing secret name
  # existingSecret: ""

# Service Account configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod Security Context
podSecurityContext:
  fsGroup: 1000
  runAsUser: 1000
  runAsNonRoot: true

# Security Context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

# Node selection
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Pod Disruption Budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1

# Horizontal Pod Autoscaler
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Network Policy
networkPolicy:
  enabled: false
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      ports:
      - protocol: TCP
        port: 8501
      - protocol: TCP
        port: 8888
      - protocol: TCP
        port: 8000

# Monitoring
monitoring:
  enabled: false
  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
