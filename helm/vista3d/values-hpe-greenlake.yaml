# ============================================================================
# HPE GreenLake for Containers - Vista3D Configuration
# ============================================================================
# Chart Version: 1.2.0
# Platform: HPE GreenLake for Containers
# Purpose: Production deployment of HPE NVIDIA Vista3D Medical AI Platform
# ============================================================================

# Global configuration for HPE GreenLake
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: "hpe-standard"  # Adjust to your HPE storage class name

# ============================================================================
# Backend (Vista3D AI Server) - GPU-enabled
# ============================================================================
backend:
  enabled: true
  name: vista3d-backend
  replicaCount: 1  # Single replica for GPU workload
  
  image:
    repository: nvcr.io/nim/nvidia/vista3d
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
    annotations:
      hpe.com/service-type: "ai-inference"
  
  # Resource allocation for GPU workload
  resources:
    limits:
      nvidia.com/gpu: 1        # 1 GPU required
      memory: "32Gi"           # Increased for production
      cpu: "8"
    requests:
      nvidia.com/gpu: 1
      memory: "16Gi"
      cpu: "4"
  
  # HPE GreenLake GPU node selection
  nodeSelector:
    nvidia.com/gpu: "true"
    workload-type: "ai-medical"  # Custom label for medical AI workloads
  
  # Tolerate GPU node taints
  tolerations:
    - key: nvidia.com/gpu
      operator: Exists
      effect: NoSchedule
    - key: workload-type
      operator: Equal
      value: "ai-medical"
      effect: NoSchedule
  
  # Prefer dedicated GPU nodes
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: nvidia.com/gpu
            operator: Exists
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: node-role
            operator: In
            values: ["gpu", "ai-compute"]
  
  # Environment variables
  env:
    - name: NGC_API_KEY
      valueFrom:
        secretKeyRef:
          name: vista3d-secrets
          key: ngc-api-key
    - name: NGC_ORG_ID
      value: "nvidia"
    - name: LOCAL_NIM_CACHE
      value: "/workspace/.cache/nim"
    - name: VISTA3D_SERVER
      value: "http://localhost:8000"
    - name: WORKSPACE_IMAGES_PATH
      value: "/workspace/output/nifti"
    - name: WORKSPACE_OUTPUTS_PATH
      value: "/workspace/output"
    - name: WORKSPACE_ROOT
      value: "/workspace"
    - name: CUDA_VISIBLE_DEVICES
      value: "0"
    - name: NVIDIA_VISIBLE_DEVICES
      value: "0"
    - name: NVIDIA_DRIVER_CAPABILITIES
      value: "compute,utility"
    - name: SUPPORTED_IMAGE_EXT
      value: '".nrrd",".nii",".nii.gz",".dcm"'
    - name: IMAGE_SERVER
      value: "http://vista3d-image-server:8888"
    # File access settings
    - name: ALLOW_LOCAL_FILES
      value: "True"
    - name: ENABLE_FILE_ACCESS
      value: "True"
    - name: ALLOW_ABSOLUTE_PATHS
      value: "True"
    - name: ALLOW_RELATIVE_PATHS
      value: "True"
    - name: ALLOW_FILE_PROTOCOL
      value: "True"
    - name: ALLOW_LOCAL_PATHS
      value: "True"
    # CORS settings
    - name: CORS_ALLOW_ORIGINS
      value: "*"
    - name: CORS_ALLOW_METHODS
      value: "GET,POST,PUT,DELETE,OPTIONS"
    - name: CORS_ALLOW_HEADERS
      value: "*"
    - name: CORS_ALLOW_CREDENTIALS
      value: "True"
    # HPE-specific settings
    - name: HPE_PLATFORM
      value: "greenlake"
    - name: DEPLOYMENT_ENV
      value: "production"
  
  # Volume mounts
  volumeMounts:
    - name: output-data
      mountPath: /workspace/output
    - name: cache
      mountPath: /workspace/.cache
  
  volumes:
    - name: output-data
      persistentVolumeClaim:
        claimName: vista3d-output-pvc
    - name: cache
      emptyDir:
        sizeLimit: 10Gi

# ============================================================================
# Frontend (Streamlit Web Interface) - Horizontally scalable
# ============================================================================
frontend:
  enabled: true
  name: vista3d-frontend
  replicaCount: 3  # High availability with 3 replicas
  
  image:
    repository: dwtwp/vista3d-frontend
    tag: latest
    pullPolicy: Always  # Always pull latest for updates
  
  service:
    type: ClusterIP
    port: 8501
    targetPort: 8501
    annotations:
      hpe.com/service-type: "web-ui"
  
  # Resource allocation for web interface
  resources:
    limits:
      memory: "8Gi"
      cpu: "4"
    requests:
      memory: "4Gi"
      cpu: "2"
  
  # Spread frontend pods across nodes
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/component
              operator: In
              values: ["frontend"]
          topologyKey: kubernetes.io/hostname
  
  # Environment variables
  env:
    - name: IMAGE_SERVER
      value: "http://vista3d-image-server:8888"
    - name: EXTERNAL_IMAGE_SERVER
      value: "http://vista3d-image-server:8888"
    - name: OUTPUT_FOLDER
      value: "/app/output"
    - name: DICOM_FOLDER
      value: "/app/dicom"
    - name: VISTA3D_SERVER
      value: "http://vista3d-backend:8000"
    - name: VISTA3D_IMAGE_SERVER_URL
      value: "http://vista3d-image-server:8888"
    - name: DOCKER_CONTAINER
      value: "true"
    - name: STREAMLIT_SERVER_RUN_ON_SAVE
      value: "true"
    - name: STREAMLIT_SERVER_FILE_WATCHER_TYPE
      value: "auto"
    - name: HPE_PLATFORM
      value: "greenlake"
    - name: DEPLOYMENT_ENV
      value: "production"
  
  # Volume mounts
  volumeMounts:
    - name: output-data
      mountPath: /app/output
    - name: dicom-data
      mountPath: /app/dicom
  
  volumes:
    - name: output-data
      persistentVolumeClaim:
        claimName: vista3d-output-pvc
    - name: dicom-data
      persistentVolumeClaim:
        claimName: vista3d-dicom-pvc

# ============================================================================
# Image Server - Serves medical image files
# ============================================================================
imageServer:
  enabled: true
  name: vista3d-image-server
  replicaCount: 2  # 2 replicas for redundancy
  
  image:
    repository: dwtwp/vista3d-image-server
    tag: latest
    pullPolicy: Always
  
  service:
    type: ClusterIP
    port: 8888
    targetPort: 8888
    annotations:
      hpe.com/service-type: "file-server"
  
  # Resource allocation
  resources:
    limits:
      memory: "4Gi"
      cpu: "2"
    requests:
      memory: "2Gi"
      cpu: "1"
  
  # Spread across nodes
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/component
              operator: In
              values: ["image-server"]
          topologyKey: kubernetes.io/hostname
  
  # Environment variables
  env:
    - name: OUTPUT_FOLDER
      value: "/data/output"
    - name: DICOM_FOLDER
      value: "/data/dicom"
    - name: IMAGE_SERVER
      value: "http://localhost:8888"
    - name: PYTHONUNBUFFERED
      value: "1"
    - name: PYTHONDONTWRITEBYTECODE
      value: "1"
    - name: HPE_PLATFORM
      value: "greenlake"
  
  # Volume mounts (read-only for security)
  volumeMounts:
    - name: output-data
      mountPath: /data/output
      readOnly: true
    - name: dicom-data
      mountPath: /data/dicom
      readOnly: true
  
  volumes:
    - name: output-data
      persistentVolumeClaim:
        claimName: vista3d-output-pvc
    - name: dicom-data
      persistentVolumeClaim:
        claimName: vista3d-dicom-pvc

# ============================================================================
# Ingress Configuration - External access via NGINX
# ============================================================================
ingress:
  enabled: true
  className: "nginx"
  annotations:
    # SSL and security
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    # Large file uploads for medical images
    nginx.ingress.kubernetes.io/proxy-body-size: "1000m"
    nginx.ingress.kubernetes.io/client-max-body-size: "1000m"
    # Timeouts for long-running AI operations
    nginx.ingress.kubernetes.io/proxy-read-timeout: "900"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "900"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "120"
    # CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    # HPE GreenLake specific
    hpe.com/service: "vista3d-medical-ai"
    hpe.com/tier: "production"
    hpe.com/team: "healthcare-ai"
    # Certificate management (if using cert-manager)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  
  hosts:
    - host: vista3d.greenlake.yourdomain.com  # Update with your domain
      paths:
        - path: /
          pathType: Prefix
          service: vista3d-frontend
        - path: /api/vista3d
          pathType: Prefix
          service: vista3d-backend
        - path: /images
          pathType: Prefix
          service: vista3d-image-server
        - path: /health
          pathType: Prefix
          service: vista3d-image-server
  
  tls:
    - secretName: vista3d-tls
      hosts:
        - vista3d.greenlake.yourdomain.com

# ============================================================================
# Persistent Storage - HPE Storage Classes
# ============================================================================
persistence:
  enabled: true
  storageClass: "hpe-standard"  # Update to match your HPE storage class
  
  # Output volume - ReadWriteMany for shared access
  output:
    enabled: true
    storageClass: "hpe-standard"
    accessMode: ReadWriteMany
    size: 500Gi  # Adjust based on expected data volume
    annotations:
      hpe.com/data-type: "medical-results"
      hpe.com/retention: "90days"
  
  # DICOM input volume - ReadOnlyMany for multiple readers
  dicom:
    enabled: true
    storageClass: "hpe-standard"
    accessMode: ReadOnlyMany
    size: 200Gi  # Adjust based on DICOM data size
    annotations:
      hpe.com/data-type: "medical-source"
      hpe.com/retention: "permanent"

# ============================================================================
# Secrets Configuration
# ============================================================================
secrets:
  create: true
  ngcApiKey: ""  # Set via --set or external secret manager
  # For production, consider using HPE GreenLake's secret management
  # or external-secrets operator

# ============================================================================
# Service Account
# ============================================================================
serviceAccount:
  create: true
  annotations:
    hpe.com/managed-by: "vista3d"
  name: "vista3d-sa"

# ============================================================================
# Security Contexts - Production hardening
# ============================================================================
podSecurityContext:
  fsGroup: 1000
  runAsUser: 1000
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false  # Some apps need write access
  runAsNonRoot: true
  runAsUser: 1000

# ============================================================================
# Pod Disruption Budget - Ensure availability during updates
# ============================================================================
podDisruptionBudget:
  enabled: true
  minAvailable: 1  # At least 1 frontend pod must be available

# ============================================================================
# Horizontal Pod Autoscaling - Auto-scale frontend based on load
# ============================================================================
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# ============================================================================
# Network Policy - Secure inter-pod communication
# ============================================================================
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      - namespaceSelector:
          matchLabels:
            name: monitoring
      ports:
      - protocol: TCP
        port: 8501
      - protocol: TCP
        port: 8888
      - protocol: TCP
        port: 8000

# ============================================================================
# Monitoring - HPE GreenLake observability integration
# ============================================================================
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
    labels:
      release: prometheus
      hpe.com/monitoring: "enabled"
    annotations:
      hpe.com/service: "vista3d"

# ============================================================================
# Additional Labels for HPE GreenLake
# ============================================================================
commonLabels:
  hpe.com/platform: "greenlake"
  hpe.com/project: "medical-ai"
  hpe.com/cost-center: "healthcare"
  hpe.com/compliance: "hipaa"

# ============================================================================
# Node Selection (optional - override per component above)
# ============================================================================
nodeSelector: {}

tolerations: []

affinity: {}

